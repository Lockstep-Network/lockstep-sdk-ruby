#
# Lockstep Software Development Kit for Ruby
#
# (c) 2021-2022 Lockstep, Inc.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.
#
# @author     Ted Spence <tspence@lockstep.io>
# @copyright  2021-2022 Lockstep, Inc.
# @version    2022.3
# @link       https://github.com/Lockstep-Network/lockstep-sdk-ruby
#


module LockstepSdk

    # A Payment represents money sent from one company to another.  A single payment may contain payments for
    # one or more invoices; it is also possible for payments to be made in advance of an invoice, for example,
    # as a deposit.  The creator of the Payment is identified by the `CustomerId` field, and the recipient of
    # the Payment is identified by the `CompanyId` field.  Most Payments are uniquely identified both by a
    # Lockstep Platform ID number and a customer ERP "key" that was generated by the system that originated
    # the Payment.  Payments that have not been fully applied have a nonzero `UnappliedAmount` value, which
    # represents a deposit that has been paid and not yet applied to an Invoice.
    class paymentModel
        # @return [uuid] The GroupKey uniquely identifies a single Lockstep Platform account. All records for this account will share the same GroupKey value. GroupKey values cannot be changed once created. For more information, see [Accounts and GroupKeys](https://developer.lockstep.io/docs/accounts-and-groupkeys).
        attr_accessor :group_key
        # @return [uuid] The unique ID of this record, automatically assigned by Lockstep when this record is added to the Lockstep platform. For the ID of this record in its originating financial system, see `ErpKey`.
        attr_accessor :payment_id
        # @return [uuid] The ID of the company to which this payment belongs.
        attr_accessor :company_id
        # @return [string] The unique ID of this record as it was known in its originating financial system. If this company record was imported from a financial system, it will have the value `ErpKey` set to the original primary key number of the record as it was known in the originating financial system. If this record was not imported, this value will be `null`. For more information, see [Identity Columns](https://developer.lockstep.io/docs/identity-columns).
        attr_accessor :erp_key
        # @return [string] The type of payment, cash or check.
        attr_accessor :payment_type
        # @return [string] Cash, check, credit card, wire transfer.
        attr_accessor :tender_type
        # @return [boolean] Has the payment been fully applied?
        attr_accessor :is_open
        # @return [string] Memo or reference text (ex. memo field on a check).
        attr_accessor :memo_text
        # @return [date] The date of this payment.
        attr_accessor :payment_date
        # @return [date] Payment post date.
        attr_accessor :post_date
        # @return [double] Total amount of this payment.
        attr_accessor :payment_amount
        # @return [double] Unapplied balance of this payment.
        attr_accessor :unapplied_amount
        # @return [string] Currency of the payment. This will be validated by the /api/v1/currencies data set
        attr_accessor :currency_code
        # @return [string] Reference code for the payment for the given Erp system.
        attr_accessor :reference_code
        # @return [date-time] The date on which this record was created.
        attr_accessor :created
        # @return [uuid] The ID of the user who created this payment.
        attr_accessor :created_user_id
        # @return [date-time] The date on which this record was last modified.
        attr_accessor :modified
        # @return [uuid] The ID of the user who last modified this payment.
        attr_accessor :modified_user_id
        # @return [uuid] AppEnrollmentId for this record; used for mapping purposes.
        attr_accessor :app_enrollment_id
        # @return [boolean] Is the payment voided?
        attr_accessor :is_voided
        # @return [boolean] Is the payment in dispute?
        attr_accessor :in_dispute
        # @return [paymentAppliedModel] All applications this payment is associated with. To retrieve this collection, specify `Applications` in the "Include" parameter for your query.
        attr_accessor :applications
        # @return [noteModel] All notes attached to this payment. To retrieve this collection, specify `Notes` in the "Include" parameter for your query.
        attr_accessor :notes
        # @return [attachmentModel] All attachments attached to this payment. To retrieve this collection, specify `Attachments` in the "Include" parameter for your query.
        attr_accessor :attachments
        # @return [customFieldDefinitionModel] All definitions attached to this payment. To retrieve this collection, specify `CustomFieldValues` in the "Include" parameter for your query.
        attr_accessor :custom_field_definitions
        # @return [customFieldValueModel] All values attached to this payment. To retrieve this collection, specify `CustomFieldValues` in the "Include" parameter for your query.
        attr_accessor :custom_field_values
    end
end
