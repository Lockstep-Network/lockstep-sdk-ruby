#
# Lockstep Platform SDK for Ruby
#
# (c) 2021-2023 Lockstep, Inc.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.
#
# @author     Lockstep Network <support@lockstep.io>
# @copyright  2021-2023 Lockstep, Inc.
# @link       https://github.com/Lockstep-Network/lockstep-sdk-ruby
#


require 'json'

module LockstepSdk

    ##
    # Represents detailed transaction information which represents either Invoices, Credit Memos or Payments
    # within the group account.
    class TransactionModel

        ##
        # Initialize the TransactionModel using the provided prototype
        def initialize(params = {})
            @group_key = params.dig(:group_key)
            @base_currency_code = params.dig(:base_currency_code)
            @reference_number = params.dig(:reference_number)
            @transaction_id = params.dig(:transaction_id)
            @transaction_status = params.dig(:transaction_status)
            @transaction_type = params.dig(:transaction_type)
            @transaction_sub_type = params.dig(:transaction_sub_type)
            @transaction_date = params.dig(:transaction_date)
            @due_date = params.dig(:due_date)
            @days_past_due = params.dig(:days_past_due)
            @currency_code = params.dig(:currency_code)
            @transaction_amount = params.dig(:transaction_amount)
            @outstanding_amount = params.dig(:outstanding_amount)
            @base_currency_transaction_amount = params.dig(:base_currency_transaction_amount)
            @base_currency_outstanding_amount = params.dig(:base_currency_outstanding_amount)
            @transaction_detail_count = params.dig(:transaction_detail_count)
            @supports_erp_pdf_retrieval = params.dig(:supports_erp_pdf_retrieval)
        end

        ##
        # @return [Uuid] Group account transaction is associated with.
        attr_accessor :group_key

        ##
        # @return [String] The base currency code of the group.
        attr_accessor :base_currency_code

        ##
        # @return [String] An additional reference number that is sometimes used to identify a transaction. The meaning of this field is specific to the ERP or accounting system used by the user.
        attr_accessor :reference_number

        ##
        # @return [Uuid] The unique ID of the transaction record.
        attr_accessor :transaction_id

        ##
        # @return [String] The status of the transaction record. Recognized Invoice status codes are: * `Open` - Represents an invoice that is considered open and needs more work to complete * `Closed` - Represents an invoice that is considered closed and resolved Recognized Payment status codes are: * `Open` - Represents an payment that includes some unassigned amount that has not yet been applied to an invoice * `Closed` - Represents an payment where `UnappliedAmount` will be zero
        attr_accessor :transaction_status

        ##
        # @return [String] The type of the transaction record. Recognized Invoice types are: * `AR Invoice` - Represents an invoice sent by Company to the Customer * `AP Invoice` - Represents an invoice sent by Vendor to the Company * `AR Credit Memo` - Represents a credit memo generated by Company given to Customer * `AP Credit Memo` - Represents a credit memo generated by Vendor given to Company Recognized PaymentType values are: * `AR Payment` - A payment made by a Customer to the Company * `AP Payment` - A payment made by the Company to a Vendor
        attr_accessor :transaction_type

        ##
        # @return [String] Additional type categorization of the transaction.
        attr_accessor :transaction_sub_type

        ##
        # @return [Date-time] The date when a transaction record was reported.
        attr_accessor :transaction_date

        ##
        # @return [Date-time] The date when a transaction record is due for payment or completion.
        attr_accessor :due_date

        ##
        # @return [Int32] The amount of days past the due date the transaction is left un-closed.
        attr_accessor :days_past_due

        ##
        # @return [String] The currency code of the transaction.
        attr_accessor :currency_code

        ##
        # @return [Double] The total value of this transaction, inclusive or all taxes and line items.
        attr_accessor :transaction_amount

        ##
        # @return [Double] The remaining balance of this transaction.
        attr_accessor :outstanding_amount

        ##
        # @return [Double] The total value of this transaction, inclusive or all taxes and line items in the group's base currency.
        attr_accessor :base_currency_transaction_amount

        ##
        # @return [Double] The remaining balance of this transaction in the group's base currency.
        attr_accessor :base_currency_outstanding_amount

        ##
        # @return [Int32] The count of items associated to the transaction. Examples: * Number of payments for an invoice. * Number of invoices a payment or credit memo is applied to.
        attr_accessor :transaction_detail_count

        ##
        # @return [Boolean] Specific transactions have support for pdf retrieval from their respective erp. When this flag is true, an additional call to Invoices/{id}/pdf or Payments/{id}/pdf can be made to retrieve a pdf directly from the erp.
        attr_accessor :supports_erp_pdf_retrieval

        ##
        # @return [object] This object as a JSON key-value structure
        def as_json(options={})
            {
                'groupKey' => @group_key,
                'baseCurrencyCode' => @base_currency_code,
                'referenceNumber' => @reference_number,
                'transactionId' => @transaction_id,
                'transactionStatus' => @transaction_status,
                'transactionType' => @transaction_type,
                'transactionSubType' => @transaction_sub_type,
                'transactionDate' => @transaction_date,
                'dueDate' => @due_date,
                'daysPastDue' => @days_past_due,
                'currencyCode' => @currency_code,
                'transactionAmount' => @transaction_amount,
                'outstandingAmount' => @outstanding_amount,
                'baseCurrencyTransactionAmount' => @base_currency_transaction_amount,
                'baseCurrencyOutstandingAmount' => @base_currency_outstanding_amount,
                'transactionDetailCount' => @transaction_detail_count,
                'supportsErpPdfRetrieval' => @supports_erp_pdf_retrieval,
            }
        end

        ##
        # @return [String] This object converted to a JSON string
        def to_json(*options)
            "[#{as_json(*options).to_json(*options)}]"
        end
    end
end
